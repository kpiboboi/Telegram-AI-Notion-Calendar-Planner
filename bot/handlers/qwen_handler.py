from aiogram.types import Message
from bot.qwen.qwen_client import qwen_chat
from bot.notion.notion_api import NotionAPI
from bot.config import CHAT_DATABASE_ID
from bot.utils.logger import logger
from datetime import datetime

notion_api = NotionAPI()

async def ask_command(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ Qwen –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ Notion"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª /ask")
    user_input = message.text.replace("/ask", "").strip()

    if not user_input:
        logger.warning("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask")
        return

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.debug(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è ID {message.from_user.id}...")
        chat_history = await notion_api.query_database(
            CHAT_DATABASE_ID,
            {
                "filter": {
                    "property": "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    "number": {"equals": message.from_user.id}
                },
                "page_size": 10,
                "sorts": [{"property": "–î–∞—Ç–∞", "direction": "descending"}]
            }
        )

        messages = [{"role": "system", "content": "You are a helpful assistant."}]

        for item in reversed(chat_history.get("results", [])):
            props = item["properties"]
            if "–°–æ–æ–±—â–µ–Ω–∏–µ" in props and props["–°–æ–æ–±—â–µ–Ω–∏–µ"]["rich_text"]:
                user_text = props["–°–æ–æ–±—â–µ–Ω–∏–µ"]["rich_text"][0]["text"]["content"]
                messages.append({"role": "user", "content": user_text})

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messages.append({"role": "user", "content": user_input})

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Qwen
        response = await qwen_chat(messages)
        logger.info(f"ü§ñ –û—Ç–≤–µ—Ç AI: {response}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Notion
        current_datetime = datetime.utcnow().isoformat()
        chat_entry = {
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": {"title": [{"text": {"content": message.from_user.full_name}}]},
            "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": {"number": message.from_user.id},
            "–°–æ–æ–±—â–µ–Ω–∏–µ": {"rich_text": [{"text": {"content": user_input}}]},
            "–î–∞—Ç–∞": {"date": {"start": current_datetime}}
        }
        await notion_api.create_page(CHAT_DATABASE_ID, chat_entry)
        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Notion")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(response)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /ask: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")